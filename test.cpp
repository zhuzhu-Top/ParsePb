//
// Created by 28264 on 2023/6/10.
//

#include "gtest/gtest.h"
#include "ProtobufHelper.h"


//TEST(PROTOBUF_TEST, Trivial) {//这个PB 格式错误的
//
//    ProtobufHelper helper;
//    uint8_t pb_data[]={0xf0,0x0d,0x00,0x00,0x10,0x08,0x00,0x00,0x04,0x34,0x00,0x00,0x00,0x5f,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x14,0x3b,0x39,0x67,0x08,0x00,0x81,0x00,0x00,0x00,0x05,0x73,0x6f,0x73,0x6f,0x0a,0x00,0x41,0x4b,0x73,0xbd,0x72,0x09,0x00,0x90,0x00,0x00,0x07,0x69,0x50,0x68,0x6f,0x6e,0x65,0x0b,0x00,0x51,0x00,0x46,0xa9,0x3e,0x0c,0x09,0x00,0xf0,0x06,0x00,0x00,0x13,0xe5,0xa4,0xaa,0xe9,0x98,0xb3,0xe7,0x85,0xa7,0xe5,0xb8,0xb8,0xe5,0x8d,0x87,0xe8,0xb5,0xb7,0x17,0x00,0x51,0x00,0x12,0x18,0x54,0x03,0x09,0x00,0x62,0x00,0x00,0x0d,0x62,0x69,0x75,0x03,0x00,0x30,0xef,0xbd,0x9e,0x11,0x00,0x40,0x00,0x18,0xfa,0x63,0x7c,0x00,0x00,0x02,0x00,0xf0,0x02,0x11,0xe6,0x95,0xb0,0xe6,0x8d,0xae,0xe9,0x87,0x87,0xe9,0x9b,0x86,0x74,0x65,0x73,0x74,0x15,0x00,0x51,0x00,0x28,0xb4,0xff,0x9c,0x09,0x00,0xf0,0x06,0x00,0x00,0x13,0x2f,0x2f,0x2f,0xe6,0x97,0xa0,0xe6,0x83,0x85,0xe6,0x97,0xa0,0xe4,0xb9,0x89,0x40,0x40,0x40,0x17,0x00,0x51,0x00,0x6a,0xd1,0xd3,0xf4,0x09,0x00,0xb0,0x00,0x00,0x04,0xe5,0x93,0x8e,0x00,0x00,0x00,0x00,0x00,0x74,0x73,0x66,0x34,0x67,0x06};
//    JSON json;
//    helper.parse_pb(pb_data,sizeof(pb_data),json);
//
//    std::cout<<json.dump()<<std::endl;
//}
TEST(PROTOBUF_TEST2, Trivial) {

    ProtobufHelper helper;
    uint8_t pb_data[]={0x0a,0xab,0x01,0x12,0x12,0x31,0x36,0x37,0x39,0x34,0x37,0x33,0x33,0x33,0x37,0x36,0x35,0x32,0x38,0x33,0x30,0x37,0x39,0x2a,0x94,0x01,0x08,0x01,0x12,0x08,0x32,0x36,0x34,0x30,0x38,0x36,0x38,0x33,0x1a,0x07,0x36,0x30,0x37,0x38,0x36,0x32,0x33,0x20,0xb8,0xd6,0xa5,0xc3,0xf0,0x30,0x3a,0x76,0x0d,0x00,0x00,0x87,0x44,0x15,0x00,0x00,0xf0,0x44,0x1a,0x6a,0x68,0x74,0x74,0x70,0x73,0x3a,0x2f,0x2f,0x63,0x68,0x69,0x6e,0x61,0x2d,0x63,0x68,0x61,0x74,0x2d,0x69,0x6d,0x67,0x2e,0x73,0x6f,0x75,0x6c,0x61,0x70,0x70,0x2e,0x63,0x6e,0x2f,0x69,0x6d,0x61,0x67,0x65,0x2f,0x32,0x30,0x32,0x33,0x2d,0x30,0x33,0x2d,0x32,0x32,0x2f,0x31,0x62,0x61,0x32,0x39,0x66,0x35,0x63,0x2d,0x35,0x39,0x30,0x34,0x2d,0x34,0x62,0x61,0x62,0x2d,0x62,0x37,0x39,0x37,0x2d,0x35,0x33,0x31,0x37,0x39,0x64,0x38,0x65,0x30,0x30,0x35,0x61,0x2d,0x31,0x36,0x37,0x39,0x34,0x37,0x33,0x33,0x33,0x37,0x37,0x33,0x33,0x2e,0x6a,0x70,0x65,0x67,0x0a,0x22,0x18,0x03,0x42,0x1e,0x12,0x0d,0x31,0x36,0x37,0x39,0x34,0x37,0x33,0x33,0x33,0x39,0x32,0x30,0x30,0x1a,0x0d,0x31,0x36,0x37,0x39,0x34,0x37,0x33,0x33,0x33,0x39,0x31,0x39,0x32};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);

    std::string str=json.dump();
    std::cout<<str<<std::endl;
    JSON ret= JSON::parse(R"(
{"1":
   [{
     "2":"167947333765283079",
     "5":{"1":1,"2":"26408683",
        "3":"6078623",
        "4":1679473339192,
        "7":{
            "1":1149698048,
            "2":1156579328,
            "3":"https://china-chat-img.soulapp.cn/image/2023-03-22/1ba29f5c-5904-4bab-b797-53179d8e005a-1679473337733.jpeg"}}},
   {
     "3":3,
      "8":
        {
       "2":"1679473339200",
       "3":"1679473339192"
        }
  }]
}
)");

    ASSERT_EQ(json,ret);
}
TEST(PROTOBUF_TEST_Fix32_Fix64, Trivial) {

    ProtobufHelper helper;
    uint8_t pb_data[]={0x09,0x69,0xb6,0x01,0x00,0x00,0x00,0x00,0x00,0x15,0x01,0x00,0x00,0x00};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);

    JSON ret= JSON::parse(R"(
{"1":112233,
"2":1}
)");
    std::string str=json.dump();
    std::cout<<str<<std::endl;
    ASSERT_EQ(json,ret);
}
TEST(PROTOBUF_TEST_Repeat2, Trivial) {

    ProtobufHelper helper;       //这里构造一个特殊的0x0a
    uint8_t pb_data[]={0x1a,0x04,0x0a,0x16,0xcd,0x02,0x00,0x00,0x00,0x00,0x00,0x00};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);
    JSON ret= JSON::parse(R"(
{"3":"0a16cd02"}
)");
    std::string str=json.dump();
    std::cout<<str<<std::endl;
    ASSERT_EQ(json,ret);
}
TEST(PROTOBUF_TEST_Repeat, Trivial) {

    ProtobufHelper helper;
    uint8_t pb_data[]={0x1a,0x04,0x0b,0x16,0xcd,0x02,0x00,0x00,0x00,0x00,0x00,0x00};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);
    JSON ret= JSON::parse(R"(
{"3":"0b16cd02"}
)");
    std::string str=json.dump();
    std::cout<<str<<std::endl;
    ASSERT_EQ(json,ret);
}
TEST(PROTOBUF_TEST_String, Trivial) {

    ProtobufHelper helper;
    uint8_t pb_data[]={0x2a,0x08,0x31,0xe4,0xb8,0xad,0x7a,0x7a,0x68,0x75};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);
    JSON ret= JSON::parse(R"(
{"5":"1中zzhu"}
)");
    ASSERT_EQ(json,ret);
}
TEST(PROTOBUF_TEST_ChildMessage, Trivial)
{
    ProtobufHelper helper;
    uint8_t pb_data[]={0x15,0x16,0x00,0x00,0x00,0x3a,0x0a,0x08,0x0a,0x12,0x06,0x7a,0x68,0x75,0xe4,0xb8,0xad};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);
    JSON ret=R"(
  {
    "2": 22,
    "7":
        {
            "1":10,
            "2":"zhu中"
        }
  }
)"_json;
    std::string str=ret["7"]["2"];
//    std::string str=json.dump();
//    std::cout<<str<<std::endl;
    ASSERT_EQ(json,ret);
}
TEST(PROTOBUF_TEST_Bytes, Trivial)
{

    ProtobufHelper helper;
    uint8_t pb_data[]={0x32,0x04,0xa,0x0a,0x03,0x04};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);
    JSON ret= JSON::parse(R"(
{"6":"0a0a0304"}
)");
    std::string str=json.dump();
    std::cout<<str<<std::endl;
    ASSERT_EQ(json,ret);
}

TEST(PROTOBUF_WX_RECV_MSG, Trivial)
{

    ProtobufHelper helper;
    uint8_t pb_data[]={0x08,0x00,0x12,0xb0,0x02,0x08,0x01,0x12,0xab,0x02,0x08,0x05,0x12,0xa6,0x02,0x08,0xa0,0x02,0x12,0xa0,0x02,0x08,0xb4,0xf7,0xd0,0x83,0x06,0x12,0x15,0x0a,0x13,0x77,0x78,0x69,0x64,0x5f,0x34,0x7a,0x72,0x36,0x31,0x36,0x69,0x72,0x36,0x66,0x69,0x31,0x32,0x32,0x1a,0x15,0x0a,0x13,0x77,0x78,0x69,0x64,0x5f,0x38,0x64,0x31,0x32,0x34,0x6c,0x67,0x79,0x6d,0x77,0x38,0x6f,0x32,0x32,0x20,0x01,0x2a,0x0a,0x0a,0x08,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x30,0x03,0x38,0x01,0x42,0x02,0x08,0x00,0x48,0x9b,0xf7,0x94,0xa4,0x06,0x52,0xaa,0x01,0x3c,0x6d,0x73,0x67,0x73,0x6f,0x75,0x72,0x63,0x65,0x3e,0x0a,0x09,0x3c,0x61,0x6c,0x6e,0x6f,0x64,0x65,0x3e,0x0a,0x09,0x09,0x3c,0x63,0x66,0x3e,0x32,0x3c,0x2f,0x63,0x66,0x3e,0x0a,0x09,0x3c,0x2f,0x61,0x6c,0x6e,0x6f,0x64,0x65,0x3e,0x0a,0x09,0x3c,0x73,0x69,0x67,0x6e,0x61,0x74,0x75,0x72,0x65,0x3e,0x76,0x31,0x5f,0x67,0x7a,0x51,0x37,0x32,0x46,0x6d,0x52,0x3c,0x2f,0x73,0x69,0x67,0x6e,0x61,0x74,0x75,0x72,0x65,0x3e,0x0a,0x09,0x3c,0x74,0x6d,0x70,0x5f,0x6e,0x6f,0x64,0x65,0x3e,0x0a,0x09,0x09,0x3c,0x70,0x75,0x62,0x6c,0x69,0x73,0x68,0x65,0x72,0x2d,0x69,0x64,0x3e,0x26,0x6c,0x74,0x3b,0x21,0x5b,0x43,0x44,0x41,0x54,0x41,0x5b,0x5d,0x5d,0x26,0x67,0x74,0x3b,0x3c,0x2f,0x70,0x75,0x62,0x6c,0x69,0x73,0x68,0x65,0x72,0x2d,0x69,0x64,0x3e,0x0a,0x09,0x3c,0x2f,0x74,0x6d,0x70,0x5f,0x6e,0x6f,0x64,0x65,0x3e,0x0a,0x3c,0x2f,0x6d,0x73,0x67,0x73,0x6f,0x75,0x72,0x63,0x65,0x3e,0x0a,0x5a,0x11,0x7a,0x68,0x75,0x7a,0x68,0x75,0x20,0x3a,0x20,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x60,0xee,0xc6,0xdd,0x97,0xe4,0xe4,0xdc,0xc2,0x78,0x68,0x82,0xe6,0xe9,0xf5,0x02,0x18,0x00,0x22,0xf0,0x02,0x08,0xea,0x02,0x12,0xea,0x02,0x08,0x2f,0x12,0x08,0x08,0x01,0x10,0xf5,0xe5,0xe9,0xf5,0x02,0x12,0x04,0x08,0x65,0x10,0x00,0x12,0x08,0x08,0x02,0x10,0x82,0xe6,0xe9,0xf5,0x02,0x12,0x04,0x08,0x66,0x10,0x00,0x12,0x04,0x08,0x0d,0x10,0x00,0x12,0x05,0x08,0xcc,0x01,0x10,0x00,0x12,0x08,0x08,0x03,0x10,0xec,0xe5,0xe9,0xf5,0x02,0x12,0x04,0x08,0x67,0x10,0x00,0x12,0x08,0x08,0x0b,0x10,0xf7,0xdd,0xe9,0xf5,0x02,0x12,0x04,0x08,0x6f,0x10,0x00,0x12,0x04,0x08,0x04,0x10,0x00,0x12,0x04,0x08,0x68,0x10,0x00,0x12,0x04,0x08,0x05,0x10,0x00,0x12,0x04,0x08,0x69,0x10,0x00,0x12,0x04,0x08,0x07,0x10,0x00,0x12,0x04,0x08,0x6b,0x10,0x00,0x12,0x04,0x08,0x08,0x10,0x00,0x12,0x04,0x08,0x6c,0x10,0x00,0x12,0x08,0x08,0x09,0x10,0xf7,0xdd,0xe9,0xf5,0x02,0x12,0x04,0x08,0x6d,0x10,0x00,0x12,0x08,0x08,0x16,0x10,0xe7,0xe5,0xe9,0xf5,0x02,0x12,0x04,0x08,0x06,0x10,0x00,0x12,0x04,0x08,0x7a,0x10,0x00,0x12,0x04,0x08,0x6a,0x10,0x00,0x12,0x08,0x08,0x10,0x10,0xf7,0xdd,0xe9,0xf5,0x02,0x12,0x08,0x08,0x11,0x10,0xf7,0xdd,0xe9,0xf5,0x02,0x12,0x04,0x08,0x72,0x10,0x00,0x12,0x08,0x08,0x0e,0x10,0xf7,0xdd,0xe9,0xf5,0x02,0x12,0x04,0x08,0x70,0x10,0x00,0x12,0x06,0x08,0x13,0x10,0x8f,0x84,0x02,0x12,0x04,0x08,0x1a,0x10,0x00,0x12,0x05,0x08,0x1b,0x10,0xe8,0x3f,0x12,0x08,0x08,0x18,0x10,0x9b,0xf7,0x94,0xa4,0x06,0x12,0x08,0x08,0x17,0x10,0x93,0xf6,0x94,0xa4,0x06,0x12,0x04,0x08,0x0a,0x10,0x00,0x12,0x09,0x08,0xc9,0x01,0x10,0x9b,0xf7,0x94,0xa4,0x06,0x12,0x05,0x08,0xcd,0x01,0x10,0x00,0x12,0x05,0x08,0xca,0x01,0x10,0x00,0x12,0x05,0x08,0xcb,0x01,0x10,0x00,0x12,0x05,0x08,0xce,0x01,0x10,0x65,0x12,0x05,0x08,0xcf,0x01,0x10,0x00,0x12,0x04,0x08,0x14,0x10,0x00,0x12,0x04,0x08,0x15,0x10,0x00,0x12,0x09,0x08,0xe8,0x07,0x10,0xf8,0xf2,0x93,0xa4,0x06,0x12,0x09,0x08,0xe9,0x07,0x10,0xb5,0x8f,0x94,0xa4,0x06,0x12,0x09,0x08,0xd1,0x0f,0x10,0x90,0xa5,0x90,0xa4,0x06,0x12,0x09,0x08,0xd3,0x0f,0x10,0x8f,0x86,0x92,0xa4,0x06,0x28,0x01,0x30,0x9c,0xf6,0x88,0xfe,0x01,0x38,0x9e,0xf7,0x94,0xa4,0x06,0x42,0x15,0x08,0x11,0x12,0x11,0x0a,0x0f,0x08,0x02,0x08,0x1a,0x08,0x1b,0x10,0xd1,0xa2,0x90,0xbe,0x0a,0x18,0xe9,0x07};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);
    JSON ret= JSON::parse(R"(
{"1":0,"2":{"1":1,"2":{"1":5,"2":{"1":288,"2":{"1":1618230196,"10":"<msgsource>\n\t<alnode>\n\t\t<cf>2</cf>\n\t</alnode>\n\t<signature>v1_gzQ72FmR</signature>\n\t<tmp_node>\n\t\t<publisher-id>&lt;![CDATA[]]&gt;</publisher-id>\n\t</tmp_node>\n</msgsource>\n","11":"zhuzhu : 11111111","12":8684474064623330158,"13":783971074,"2":{"1":"wxid_4zr616ir6fi122"},"3":{"1":"wxid_8d124lgymw8o22"},"4":1,"5":{"1":"11111111"},"6":3,"7":1,"8":"0800","9":1686453147}}}},"3":0,"4":{"1":362,"2":{"1":47,"2":[{"1":1,"2":783971061},{"1":101,"2":0},{"1":2,"2":783971074},{"1":102,"2":0},{"1":13,"2":0},{"1":204,"2":0},{"1":3,"2":783971052},{"1":103,"2":0},{"1":11,"2":783970039},{"1":111,"2":0},{"1":4,"2":0},{"1":104,"2":0},{"1":5,"2":0},{"1":105,"2":0},{"1":7,"2":0},{"1":107,"2":0},{"1":8,"2":0},{"1":108,"2":0},{"1":9,"2":783970039},{"1":109,"2":0},{"1":22,"2":783971047},{"1":6,"2":0},{"1":122,"2":0},{"1":106,"2":0},{"1":16,"2":783970039},{"1":17,"2":783970039},{"1":114,"2":0},{"1":14,"2":783970039},{"1":112,"2":0},{"1":19,"2":33295},{"1":26,"2":0},{"1":27,"2":8168},{"1":24,"2":1686453147},{"1":23,"2":1686453011},{"1":10,"2":0},{"1":201,"2":1686453147},{"1":205,"2":0},{"1":202,"2":0},{"1":203,"2":0},{"1":206,"2":101},{"1":207,"2":0},{"1":20,"2":0},{"1":21,"2":0},{"1":1000,"2":1686436216},{"1":1001,"2":1686439861},{"1":2001,"2":1686377104},{"1":2003,"2":1686405903}]}},"5":1,"6":532822812,"7":1686453150,"8":{"1":17,"2":{"1":{"1":[2,26,27],"2":2814644561,"3":1001}}}}
)");
    std::string str=json.dump();
    std::cout<<str<<std::endl;
    ASSERT_EQ(json,ret);
}
TEST(PROTOBUF_DummyMessage, Trivial)
{

    ProtobufHelper helper;
    uint8_t pb_data[]={0x12,0x18,0x08,0x7b,0x12,0x14,0x49,0x20,0x61,0x6d,0x20,0x61,0x20,0x64,0x75,0x6d,0x6d,0x79,0x20,0x6d,0x65,0x73,0x73,0x61,0x67,0x65,0x1a,0x26,0x08,0xd9,0x02,0x12,0x21,0x49,0x27,0x6d,0x20,0x74,0x68,0x65,0x20,0x66,0x69,0x72,0x73,0x74,0x20,0x65,0x6c,0x65,0x6d,0x65,0x6e,0x74,0x20,0x6f,0x6e,0x20,0x61,0x6e,0x20,0x61,0x72,0x72,0x61,0x79,0x1a,0x13,0x08,0xb7,0x04,0x12,0x0e,0x53,0x65,0x63,0x6f,0x6e,0x64,0x20,0x65,0x6c,0x65,0x6d,0x65,0x6e,0x74,0x1a,0x16,0x08,0xe7,0x07,0x12,0x11,0x49,0x27,0x6d,0x20,0x74,0x68,0x65,0x20,0x6c,0x61,0x73,0x74,0x20,0x6f,0x6e,0x65,0x21};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);
    JSON ret= JSON::parse(R"(
{
    "2": {
        "1": 123,
        "2": "I am a dummy message"
    },
    "3": [
        {
            "1": 345,
            "2": "I'm the first element on an array"
        },
        {
            "1": 567,
            "2": "Second element"
        },
        {
            "1": 999,
            "2": "I'm the last one!"
        }
    ]
}
)");
    std::string str=json.dump();
    std::cout<<str<<std::endl;
    ASSERT_EQ(json,ret);
}

TEST(PROTOBUF_Json2Pb_String, Trivial)
{

    JSON input_json= JSON::parse(R"(
{"1":"zhuzhu中123"}
)");
    std::vector<std::uint8_t> expect_value={0x0a,0x0c,0x7a,0x68,0x75,0x7a,0x68,0x75,0xe4,0xb8,0xad,0x31,0x32,0x33};
    //0a 0c 7a 68 75 7a 68 75 e4 b8 ad 31 32 33
    std::uint32_t input_json_size=input_json.dump().size();
    ProtobufHelper helper;
    std::vector<std::uint8_t> pb_data;
    pb_data.resize(input_json_size);
    auto pb_len= helper.json2pb(input_json,pb_data.data(),input_json_size);
    pb_data.resize(pb_len);
    std::string str=input_json.dump();
    std::cout<<str<<std::endl;
    ASSERT_EQ(pb_data,expect_value);
}
TEST(PROTOBUF_Json2Pb_RepeatString_Fix32, Trivial)
{
/*
[1](b):zhuzhu中123
[1(1)](b):222
{
 "1" : ["zhuzhu中123","123"]
}
0a 0c
   7a 68 75 7a 68 75 e4 b8 ad 31 32 33  //zhuzhu中123
0a 03
   32 32 32                             //123
{
 "2" : [1,2,3]                          //fix32
}
12 0c
   01 00 00 00 02 00 00 00 03 00 00 00
 * */
//string测试数据
//    JSON input_json= JSON::parse(R"(
//{"1":["zhuzhu中123","222"]}
//)");
//fix32测试数据
//    JSON input_json= JSON::parse(R"(
//{"2":["fix32_num",1,2,3]}
//)");
//合并后测试数据
    JSON input_json= JSON::parse(R"(
{   "1":["zhuzhu中123","222"],
    "2":["fix32_num",1,2,3]
}
)");
    std::string str=input_json.dump();
    std::vector<std::uint8_t> expect_value={0x0a,0x0c,0x7a,0x68,0x75,0x7a,0x68,0x75,0xe4,0xb8,0xad,0x31,0x32,0x33,0x0a,0x03,0x32,0x32,0x32,0x12,0x0c,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03,0x00,0x00,0x00};
    //0a 0c 7a 68 75 7a 68 75 e4 b8 ad 31 32 33
    std::uint32_t input_json_size=input_json.dump().size();
    ProtobufHelper helper;
    std::vector<std::uint8_t> pb_data;
    pb_data.resize(input_json_size);
    auto pb_len= helper.json2pb(input_json,pb_data.data(),input_json_size);
    pb_data.resize(pb_len);

    std::cout<<str<<std::endl;
    ASSERT_EQ(pb_data,expect_value);
}

TEST(PROTOBUF_Json2Pb_Object, Trivial)
{
    JSON input_json= JSON::parse(R"(
{
    "3":
        {
        "1": {"fix32_num" : 11},
        "2": 22
        }
}
)");
    std::string str=input_json.dump();
    std::vector<std::uint8_t> expect_value={0x1a,0x07,0x0d,0x0b,0x00,0x00,0x00,0x10,0x16};
    //0a 0c 7a 68 75 7a 68 75 e4 b8 ad 31 32 33
    std::uint32_t input_json_size=input_json.dump().size();
    ProtobufHelper helper;
    std::vector<std::uint8_t> pb_data;
    pb_data.resize(input_json_size);
    auto pb_len= helper.json2pb(input_json,pb_data.data(),input_json_size);
    pb_data.resize(pb_len);

    std::cout<<str<<std::endl;
    ASSERT_EQ(pb_data,expect_value);
}


TEST(PROTOBUF_Json2Pb_WX_NewMsg, Trivial)
{
    JSON input_json= JSON::parse(R"(
{
    "1":1,
    "2":{
        "1" : {"1":"wxid_4zr6xxx6fi122"},
        "2" : "123123111",
        "3" : 1,
        "4" : 1686669176,
        "5" : 1686669176
        }
}
)");
    std::string str=input_json.dump();
    std::vector<std::uint8_t> expect_value={0x08,0x01,0x12,0x2f,0x0a,0x14,0x0a,0x12,0x77,0x78,0x69,0x64,0x5f,0x34,0x7a,0x72,0x36,0x78,0x78,0x78,0x36,0x66,0x69,0x31,0x32,0x32,0x12,0x09,0x31,0x32,0x33,0x31,0x32,0x33,0x31,0x31,0x31,0x18,0x01,0x20,0xf8,0x8e,0xa2,0xa4,0x06,0x28,0xf8,0x8e,0xa2,0xa4,0x06};
    //0a 0c 7a 68 75 7a 68 75 e4 b8 ad 31 32 33
    std::uint32_t input_json_size=input_json.dump().size();
    ProtobufHelper helper;
    std::vector<std::uint8_t> pb_data;
    pb_data.resize(input_json_size);
    auto pb_len= helper.json2pb(input_json,pb_data.data(),input_json_size);
    pb_data.resize(pb_len);

    std::cout<<str<<std::endl;
    ASSERT_EQ(pb_data,expect_value);
}
//int main(){
//    SetConsoleOutputCP(65001);
//
//    JSON js;
//    js["1"]={{"key","value"}};
//    auto arry_is=js["1"].is_array();
//    js["1"].push_back({{"key2","value2"}});
//    std::cout<<js.dump()<<std::endl;
//
//
//}